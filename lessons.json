{
  "Lesson 1": [
    {
      "question": "What is the print function in Python?",
      "options": [
        "A function to print output",
        "A variable to store data",
        "A loop to iterate over data",
        "A conditional statement to make decisions"
      ],
      "answer": "A function to print output"
    },
    {
      "question": "What is the purpose of the 'def' keyword in Python?",
      "options": [
        "To define a variable",
        "To define a function",
        "To define a class",
        "To define a loop"
      ],
      "answer": "To define a function"
    },
    {
      "question": "What is the output of the expression '5/2' in Python?",
      "options": [
        "2",
        "2.5",
        "5",
        "10"
      ],
      "answer": "2.5"
    },
    {
      "question": "What is the use of the 'split()' function in Python?",
      "options": [
        "To concatenate strings",
        "To split a string into substrings",
        "To find the length of a string",
        "To convert a string to uppercase"
      ],
      "answer": "To split a string into substrings"
    },
    {
      "question": "What is the purpose of the 'try-except' block in Python?",
      "options": [
        "To handle errors and exceptions",
        "To define a function",
        "To iterate over data",
        "To make decisions"
      ],
      "answer": "To handle errors and exceptions"
    },
    {
      "question": "Which of the following is a valid variable name in Python?",
      "options": [
        "2var",
        "var_name",
        "var-name",
        "var name"
      ],
      "answer": "var_name"
    },
    {
      "question": "What is the correct file extension for Python files?",
      "options": [
        ".p",
        ".py",
        ".pyc",
        ".pi"
      ],
      "answer": ".py"
    },
    {
      "question": "Which data type is immutable in Python?",
      "options": [
        "List",
        "Dictionary",
        "String",
        "Set"
      ],
      "answer": "String"
    },
    {
      "question": "What does the 'len()' function do?",
      "options": [
        "Returns the number of characters in a string",
        "Returns the number of elements in a list",
        "Both A and B",
        "Returns the size of memory allocated"
      ],
      "answer": "Both A and B"
    },
    {
      "question": "Which symbol is used for comments in Python?",
      "options": [
        "//",
        "/* */",
        "`#`",
        "--"
      ],
      "answer": "`#`"
    },
    {
      "question": "What is a dynamically typed language?",
      "options": [
        "Type checking is done at runtime",
        "Type checking is done at compile time",
        "Variables must be declared before use",
        "None of these"
      ],
      "answer": "Type checking is done at runtime"
    },
    {
      "question": "How do you take user input in Python?",
      "options": [
        "input()",
        "get()",
        "scan()",
        "read()"
      ],
      "answer": "input()"
    },
    {
      "question": "What does the 'is' keyword check in Python?",
      "options": [
        "Value equality",
        "Reference equality",
        "Type equality",
        "None of these"
      ],
      "answer": "Reference equality"
    },
    {
      "question": "Which function is used to convert an integer to a string?",
      "options": [
        "int()",
        "str()",
        "float()",
        "bool()"
      ],
      "answer": "str()"
    },
    {
      "question": "How do you define a multi-line string in Python?",
      "options": [
        "Using triple quotes",
        "Using double quotes",
        "Using backslash",
        "Using parentheses"
      ],
      "answer": "Using triple quotes"
    },
    {
      "question": "Which function returns the type of a variable?",
      "options": [
        "type()",
        "id()",
        "var()",
        "get()"
      ],
      "answer": "type()"
    },
    {
      "question": "Which keyword is used to define a function in Python?",
      "options": [
        "def",
        "func",
        "define",
        "lambda"
      ],
      "answer": "def"
    },
    {
      "question": "Which function is used to round a number to a given precision?",
      "options": [
        "round()",
        "ceil()",
        "floor()",
        "truncate()"
      ],
      "answer": "round()"
    },
    {
      "question": "What is the default return value of a function that does not return anything?",
      "options": [
        "None",
        "0",
        "False",
        "Undefined"
      ],
      "answer": "None"
    },
    {
      "question": "What is the purpose of the 'import' keyword in Python?",
      "options": [
        "To import a module",
        "To import a function",
        "To import a class",
        "To import a variable"
      ],
      "answer": "To import a module"
    }
  ],
  "Lesson 2": [
    {
      "question": "What is the data type of the value 42?",
      "options": [
        "int",
        "float",
        "str",
        "bool"
      ],
      "answer": "int"
    },
    {
      "question": "What is the result of type(3.14)?",
      "options": [
        "int",
        "float",
        "str",
        "list"
      ],
      "answer": "float"
    },
    {
      "question": "Which of these is a mutable data type?",
      "options": [
        "tuple",
        "string",
        "list",
        "int"
      ],
      "answer": "list"
    },
    {
      "question": "What data type is used for True or False values?",
      "options": [
        "int",
        "bool",
        "str",
        "float"
      ],
      "answer": "bool"
    },
    {
      "question": "Which of these is an immutable data type?",
      "options": [
        "list",
        "dictionary",
        "tuple",
        "set"
      ],
      "answer": "tuple"
    },
    {
      "question": "How do you declare a dictionary in Python?",
      "options": [
        "{}",
        "[]",
        "()",
        "<>"
      ],
      "answer": "{}"
    },
    {
      "question": "What is the default data type returned by input()?",
      "options": [
        "int",
        "str",
        "float",
        "bool"
      ],
      "answer": "str"
    },
    {
      "question": "Which function is used to convert a string to an integer?",
      "options": [
        "int()",
        "str()",
        "float()",
        "bool()"
      ],
      "answer": "int()"
    },
    {
      "question": "What is the result of '5' + '3' in Python?",
      "options": [
        "8",
        "53",
        "Error",
        "None"
      ],
      "answer": "53"
    },
    {
      "question": "Which data type is used to store a collection of unique values?",
      "options": [
        "list",
        "tuple",
        "set",
        "dictionary"
      ],
      "answer": "set"
    },
    {
      "question": "What is the output of type({}) in Python?",
      "options": [
        "set",
        "list",
        "dict",
        "tuple"
      ],
      "answer": "dict"
    },
    {
      "question": "Which method is used to add an element to a list?",
      "options": [
        "add()",
        "append()",
        "insert()",
        "extend()"
      ],
      "answer": "append()"
    },
    {
      "question": "Which of these data types is unordered?",
      "options": [
        "list",
        "tuple",
        "dictionary",
        "string"
      ],
      "answer": "dictionary"
    },
    {
      "question": "What is the keyword used to define a tuple?",
      "options": [
        "[]",
        "{}",
        "()",
        "<>"
      ],
      "answer": "()"
    },
    {
      "question": "What is the output of bool(0)?",
      "options": [
        "True",
        "False",
        "None",
        "Error"
      ],
      "answer": "False"
    },
    {
      "question": "Which data type allows duplicate values?",
      "options": [
        "set",
        "dictionary",
        "list",
        "tuple"
      ],
      "answer": "list"
    },
    {
      "question": "Which of these is a sequence data type?",
      "options": [
        "list",
        "set",
        "dictionary",
        "None"
      ],
      "answer": "list"
    },
    {
      "question": "Which function is used to check the data type of a variable?",
      "options": [
        "isinstance()",
        "type()",
        "check()",
        "gettype()"
      ],
      "answer": "type()"
    },
    {
      "question": "What is the correct way to declare a set?",
      "options": [
        "[]",
        "{}",
        "()",
        "set()"
      ],
      "answer": "set()"
    },
    {
      "question": "Which data type is used for text in Python?",
      "options": [
        "int",
        "float",
        "str",
        "bool"
      ],
      "answer": "str"
    }
  ],
  "Lesson 3": [
    {
      "question": "What is the addition operator in Python?",
      "options": [
        "`+`",
        "`-`",
        "`*`",
        "`/`"
      ],
      "answer": "`+`"
    },
    {
      "question": "Which operator is used for exponentiation?",
      "options": [
        "^",
        "**",
        "//",
        "%"
      ],
      "answer": "**"
    },
    {
      "question": "What is the modulus operator used for?",
      "options": [
        "Exponentiation",
        "Division",
        "Remainder",
        "Multiplication"
      ],
      "answer": "Remainder"
    },
    {
      "question": "Which operator is used for floor division?",
      "options": [
        "/",
        "//",
        "%",
        "**"
      ],
      "answer": "//"
    },
    {
      "question": "Which of the following is a comparison operator?",
      "options": [
        "=",
        "==",
        "+=",
        "*="
      ],
      "answer": "=="
    },
    {
      "question": "What does the 'not' operator do?",
      "options": [
        "Negates a boolean expression",
        "Performs bitwise NOT",
        "Checks equality",
        "None of the above"
      ],
      "answer": "Negates a boolean expression"
    },
    {
      "question": "Which operator is used for logical AND?",
      "options": [
        "&&",
        "||",
        "and",
        "or"
      ],
      "answer": "and"
    },
    {
      "question": "Which operator is used to check membership?",
      "options": [
        "in",
        "not in",
        "both A and B",
        "None of these"
      ],
      "answer": "both A and B"
    },
    {
      "question": "Which bitwise operator is used for OR operation?",
      "options": [
        "|",
        "&",
        "^",
        "~"
      ],
      "answer": "|"
    },
    {
      "question": "Which assignment operator is used for addition and assignment?",
      "options": [
        "+=",
        "-=",
        "*=",
        "/="
      ],
      "answer": "+="
    },
    {
      "question": "What is the result of 3 * 3 ** 3?",
      "options": [
        "27",
        "81",
        "729",
        "9"
      ],
      "answer": "81"
    },
    {
      "question": "Which operator is used to compare object identity?",
      "options": [
        "is",
        "==",
        "!=",
        "in"
      ],
      "answer": "is"
    },
    {
      "question": "Which logical operator represents OR in Python?",
      "options": [
        "or",
        "||",
        "|",
        "and"
      ],
      "answer": "or"
    },
    {
      "question": "What does the '//' operator do?",
      "options": [
        "Floor division",
        "Modulo",
        "Exponentiation",
        "Addition"
      ],
      "answer": "Floor division"
    },
    {
      "question": "What is the purpose of the 'in' operator in Python?",
      "options": [
        "To check membership",
        "To perform arithmetic operations",
        "To compare values",
        "To assign values"
      ],
      "answer": "To check membership"
    },
    {
      "question": "Which operator is used for bitwise XOR operation?",
      "options": [
        "^",
        "|",
        "&",
        "~"
      ],
      "answer": "^"
    },
    {
      "question": "What is the purpose of the 'not in' operator in Python?",
      "options": [
        "To check membership",
        "To check non-membership",
        "To perform arithmetic operations",
        "To compare values"
      ],
      "answer": "To check non-membership"
    },
    {
      "question": "Which operator is used for bitwise AND operation?",
      "options": [
        "&",
        "|",
        "^",
        "~"
      ],
      "answer": "&"
    },
    {
      "question": "What is the purpose of the 'is not' operator in Python?",
      "options": [
        "To compare object identity",
        "To compare object non-identity",
        "To perform arithmetic operations",
        "To compare values"
      ],
      "answer": "To compare object non-identity"
    },
    {
      "question": "Which operator is used for bitwise NOT operation?",
      "options": [
        "~",
        "|",
        "&",
        "^"
      ],
      "answer": "~"
    }
  ],
  "Lesson 4": [
    {
      "question": "What method is used to convert a string to lowercase in Python?",
      "options": [
        "lowercase()",
        "toLower()",
        "lower()",
        "downcase()"
      ],
      "answer": "lower()"
    },
    {
      "question": "Which of the following is used to create a string in Python?",
      "options": [
        "Single quotes",
        "Double quotes",
        "Triple quotes",
        "All of the above"
      ],
      "answer": "All of the above"
    },
    {
      "question": "What is the output of 'Hello' + 'World'?",
      "options": [
        "HelloWorld",
        "Hello World",
        "Hello+World",
        "Error"
      ],
      "answer": "HelloWorld"
    },
    {
      "question": "Which method is used to convert a string to uppercase?",
      "options": [
        "upper()",
        "lower()",
        "capitalize()",
        "title()"
      ],
      "answer": "upper()"
    },
    {
      "question": "What does the method strip() do in Python?",
      "options": [
        "Removes spaces from both sides",
        "Removes a specific character",
        "Removes only trailing spaces",
        "Removes only leading spaces"
      ],
      "answer": "Removes spaces from both sides"
    },
    {
      "question": "Which function is used to find the length of a string?",
      "options": [
        "size()",
        "count()",
        "len()",
        "length()"
      ],
      "answer": "len()"
    },
    {
      "question": "How can you access the first character of a string in Python?",
      "options": [
        "str[0]",
        "str(0)",
        "str.first()",
        "str.charAt(0)"
      ],
      "answer": "str[0]"
    },
    {
      "question": "What does the method replace('l', 'x') do in 'Hello'?",
      "options": [
        "Returns 'Hexxo'",
        "Returns 'Hello'",
        "Returns 'Hxxlo'",
        "Returns 'Hxllo'"
      ],
      "answer": "Returns 'Hexxo'"
    },
    {
      "question": "Which operator is used to repeat a string multiple times?",
      "options": [
        "`*`",
        "`+`",
        "`-`",
        "`/`"
      ],
      "answer": "`*`"
    },
    {
      "question": "Which of the following is NOT a valid string method?",
      "options": [
        "split()",
        "join()",
        "concat()",
        "find()"
      ],
      "answer": "concat()"
    },
    {
      "question": "What will 'Python'.find('th') return?",
      "options": [
        "2",
        "-1",
        "None",
        "Error"
      ],
      "answer": "2"
    },
    {
      "question": "Which of the following can be used for type casting in Python?",
      "options": [
        "int()",
        "str()",
        "float()",
        "All of the above"
      ],
      "answer": "All of the above"
    },
    {
      "question": "What is the result of int(4.7)?",
      "options": [
        "4",
        "5",
        "4.7",
        "Error"
      ],
      "answer": "4"
    },
    {
      "question": "What is the result of str(10) + str(5)?",
      "options": [
        "105",
        "15",
        "10+5",
        "Error"
      ],
      "answer": "105"
    },
    {
      "question": "What will float('3.14') return?",
      "options": [
        "3.14",
        "314",
        "Error",
        "None"
      ],
      "answer": "3.14"
    },
    {
      "question": "Which function is used to convert a string into a list of words?",
      "options": [
        "split()",
        "list()",
        "words()",
        "separate()"
      ],
      "answer": "split()"
    },
    {
      "question": "What will '123'.isdigit() return?",
      "options": [
        "True",
        "False",
        "None",
        "Error"
      ],
      "answer": "True"
    },
    {
      "question": "What is the output of bool('')?",
      "options": [
        "True",
        "False",
        "None",
        "Error"
      ],
      "answer": "False"
    },
    {
      "question": "What does 'Python'.startswith('P') return?",
      "options": [
        "True",
        "False",
        "None",
        "Error"
      ],
      "answer": "True"
    },
    {
      "question": "What does the method capitalize() do?",
      "options": [
        "Capitalizes the first letter",
        "Converts the whole string to uppercase",
        "Reverses the string",
        "Removes spaces"
      ],
      "answer": "Capitalizes the first letter"
    }
  ],
  "lesson 5": [
    {
      "question": "What is control flow in Python?",
      "options": [
        "The way the interpreter executes statements",
        "A type of loop",
        "A function for sorting data",
        "A debugging tool"
      ],
      "answer": "The way the interpreter executes statements"
    },
    {
      "question": "Which statement is used for decision-making in Python?",
      "options": [
        "if",
        "for",
        "while",
        "switch"
      ],
      "answer": "if"
    },
    {
      "question": "What will be the output of the following code?\n\nif 5 > 3:\n    print('Yes')",
      "options": [
        "Yes",
        "No",
        "Error",
        "Nothing"
      ],
      "answer": "Yes"
    },
    {
      "question": "Which keyword is used to provide an alternative condition in an if statement?",
      "options": [
        "elseif",
        "elif",
        "else if",
        "otherwise"
      ],
      "answer": "elif"
    },
    {
      "question": "What is the purpose of the else statement in Python?",
      "options": [
        "To define an alternative block if the condition is false",
        "To repeat a loop",
        "To declare a function",
        "To check equality"
      ],
      "answer": "To define an alternative block if the condition is false"
    },
    {
      "question": "What will be the output of `if 0: print('Hello')`?",
      "options": [
        "Hello",
        "0",
        "Error",
        "Nothing"
      ],
      "answer": "Nothing"
    },
    {
      "question": "Which operator is used for comparison?",
      "options": [
        "=",
        "==",
        "=>",
        ":="
      ],
      "answer": "=="
    },
    {
      "question": "Which of the following is NOT a logical operator in Python?",
      "options": [
        "and",
        "or",
        "not",
        "xor"
      ],
      "answer": "xor"
    },
    {
      "question": "What will be the result of `True and False`?",
      "options": [
        "True",
        "False",
        "Error",
        "None"
      ],
      "answer": "False"
    },
    {
      "question": "Which loop is used when the number of iterations is unknown?",
      "options": [
        "for",
        "while",
        "do-while",
        "repeat"
      ],
      "answer": "while"
    },
    {
      "question": "What will be the output of the following code?\n\nfor i in range(3):\n    print(i)",
      "options": [
        "1 2 3",
        "0 1 2",
        "0 1 2 3",
        "Error"
      ],
      "answer": "0 1 2"
    },
    {
      "question": "What is the default step value in a range function?",
      "options": [
        "0",
        "1",
        "-1",
        "2"
      ],
      "answer": "1"
    },
    {
      "question": "Which statement is used to terminate a loop prematurely?",
      "options": [
        "break",
        "continue",
        "return",
        "exit"
      ],
      "answer": "break"
    },
    {
      "question": "Which statement is used to skip the current iteration of a loop?",
      "options": [
        "break",
        "continue",
        "skip",
        "pass"
      ],
      "answer": "continue"
    },
    {
      "question": "What is the output of `while False: print('Hello')`?",
      "options": [
        "Hello",
        "False",
        "Error",
        "Nothing"
      ],
      "answer": "Nothing"
    },
    {
      "question": "Which function is used to iterate over a sequence of numbers?",
      "options": [
        "range()",
        "list()",
        "iter()",
        "count()"
      ],
      "answer": "range()"
    },
    {
      "question": "Which loop executes at least once regardless of condition?",
      "options": [
        "for",
        "while",
        "do-while",
        "None"
      ],
      "answer": "do-while"
    },
    {
      "question": "What will be the output of `for i in range(2, 5): print(i)`?",
      "options": [
        "1 2 3",
        "2 3 4",
        "2 3 4 5",
        "Error"
      ],
      "answer": "2 3 4"
    },
    {
      "question": "Which statement is used when a loop block should not have any instructions?",
      "options": [
        "skip",
        "continue",
        "pass",
        "break"
      ],
      "answer": "pass"
    },
    {
      "question": "What does `while True:` do?",
      "options": [
        "Executes once",
        "Runs indefinitely",
        "Returns an error",
        "Depends on the condition"
      ],
      "answer": "Runs indefinitely"
    },
    {
      "question": "What is the correct syntax for a while loop?",
      "options": [
        "while condition:",
        "while (condition) {}",
        "while: condition",
        "while (condition):"
      ],
      "answer": "while condition:"
    },
    {
      "question": "Which keyword is used for an infinite loop in Python?",
      "options": [
        "infinity",
        "forever",
        "while True",
        "loop"
      ],
      "answer": "while True"
    },
    {
      "question": "What is the output of `if 'a' > 'b': print('Yes')`?",
      "options": [
        "Yes",
        "No",
        "Error",
        "Nothing"
      ],
      "answer": "Nothing"
    },
    {
      "question": "Which of the following is NOT a valid loop control statement?",
      "options": [
        "break",
        "continue",
        "return",
        "stop"
      ],
      "answer": "stop"
    }
  ],
  "lesson 6": [
    {
      "question": "Which of the following is a mutable data structure in Python?",
      "options": [
        "List",
        "Tuple",
        "String",
        "Integer"
      ],
      "answer": "List"
    },
    {
      "question": "What is the correct way to define a tuple?",
      "options": [
        "(1, 2, 3)",
        "[1, 2, 3]",
        "{1, 2, 3}",
        "\"1, 2, 3\""
      ],
      "answer": "(1, 2, 3)"
    },
    {
      "question": "Which of the following methods is used to add an element to a list?",
      "options": [
        "append()",
        "insert()",
        "extend()",
        "All of the above"
      ],
      "answer": "All of the above"
    },
    {
      "question": "What will be the output of the following code? tuple1 = (1, 2, 3); tuple1[0] = 10",
      "options": [
        "(10, 2, 3)",
        "Error",
        "(1, 2, 3)",
        "None"
      ],
      "answer": "Error"
    },
    {
      "question": "Which of the following is an immutable data structure?",
      "options": [
        "List",
        "Tuple",
        "Dictionary",
        "Set"
      ],
      "answer": "Tuple"
    },
    {
      "question": "How do you remove a specific key-value pair from a dictionary?",
      "options": [
        "del dict[key]",
        "dict.remove(key)",
        "dict.pop(key)",
        "Both A and C"
      ],
      "answer": "Both A and C"
    },
    {
      "question": "Which method is used to get all the keys in a dictionary?",
      "options": [
        "dict.keys()",
        "dict.values()",
        "dict.items()",
        "dict.get_keys()"
      ],
      "answer": "dict.keys()"
    },
    {
      "question": "How do you access the first element of a list `my_list`?",
      "options": [
        "my_list[0]",
        "my_list(0)",
        "my_list{0}",
        "my_list.first()"
      ],
      "answer": "my_list[0]"
    },
    {
      "question": "Which method is used to merge two lists?",
      "options": [
        "append()",
        "extend()",
        "concat()",
        "merge()"
      ],
      "answer": "extend()"
    },
    {
      "question": "What will be the output of `list(range(3))`?",
      "options": [
        "[1, 2, 3]",
        "[0, 1, 2]",
        "[0, 1, 2, 3]",
        "Error"
      ],
      "answer": "[0, 1, 2]"
    },
    {
      "question": "Which of the following can store duplicate values?",
      "options": [
        "List",
        "Tuple",
        "Dictionary",
        "Both A and B"
      ],
      "answer": "Both A and B"
    },
    {
      "question": "How do you check if a key exists in a dictionary?",
      "options": [
        "'key' in dict",
        "dict.has_key('key')",
        "dict.exists('key')",
        "dict.contains('key')"
      ],
      "answer": "'key' in dict"
    },
    {
      "question": "Which of the following is not a valid dictionary operation?",
      "options": [
        "Adding a new key-value pair",
        "Updating a value",
        "Accessing an element by index",
        "Deleting a key"
      ],
      "answer": "Accessing an element by index"
    },
    {
      "question": "Which method is used to get a value from a dictionary without an error if the key doesn’t exist?",
      "options": [
        "dict.get(key)",
        "dict[key]",
        "dict.fetch(key)",
        "dict.value(key)"
      ],
      "answer": "dict.get(key)"
    },
    {
      "question": "What will be the output of `len({1: 'a', 2: 'b', 3: 'c'})`?",
      "options": [
        "3",
        "2",
        "1",
        "Error"
      ],
      "answer": "3"
    },
    {
      "question": "Which of the following methods can be used to remove an item from a list by its value?",
      "options": [
        "pop()",
        "remove()",
        "del",
        "discard()"
      ],
      "answer": "remove()"
    },
    {
      "question": "Which data type is best for storing a collection of unique elements?",
      "options": [
        "List",
        "Tuple",
        "Set",
        "Dictionary"
      ],
      "answer": "Set"
    },
    {
      "question": "How can you convert a tuple into a list?",
      "options": [
        "list(tuple)",
        "tuple.list()",
        "tuple.to_list()",
        "convert(tuple)"
      ],
      "answer": "list(tuple)"
    },
    {
      "question": "Which of the following is a correct way to create an empty dictionary?",
      "options": [
        "{}",
        "[]",
        "()",
        "set()"
      ],
      "answer": "{}"
    },
    {
      "question": "What happens when you use the `clear()` method on a dictionary?",
      "options": [
        "Deletes a specific key",
        "Removes all elements",
        "Raises an error",
        "Does nothing"
      ],
      "answer": "Removes all elements"
    },
    {
      "question": "Which method returns a shallow copy of a dictionary?",
      "options": [
        "copy()",
        "clone()",
        "replicate()",
        "duplicate()"
      ],
      "answer": "copy()"
    },
    {
      "question": "What will be the output of `dict1 = {1: 'a', 2: 'b'}; print(dict1.get(3, 'Not Found'))`?",
      "options": [
        "Error",
        "None",
        "Not Found",
        "3"
      ],
      "answer": "Not Found"
    },
    {
      "question": "Which of the following is an incorrect way to declare a tuple?",
      "options": [
        "(1, 2, 3)",
        "tuple([1, 2, 3])",
        "tuple = 1, 2, 3",
        "tuple(1, 2, 3)"
      ],
      "answer": "tuple(1, 2, 3)"
    }
  ],
  "lesson 7": [
    {
      "question": "Which of the following is a characteristic of a Python set?",
      "options": [
        "Ordered",
        "Immutable",
        "Allows duplicate values",
        "Unordered"
      ],
      "answer": "Unordered"
    },
    {
      "question": "How do you create an empty set in Python?",
      "options": [
        "set()",
        "{}",
        "[]",
        "set([])"
      ],
      "answer": "set()"
    },
    {
      "question": "What is the key difference between a set and a frozenset?",
      "options": [
        "Frozenset is mutable, set is not",
        "Set is immutable, frozenset is mutable",
        "Frozenset is immutable, set is mutable",
        "Both are immutable"
      ],
      "answer": "Frozenset is immutable, set is mutable"
    },
    {
      "question": "Which method is used to add an element to a set?",
      "options": [
        "append()",
        "insert()",
        "add()",
        "extend()"
      ],
      "answer": "add()"
    },
    {
      "question": "How do you remove an item from a set without raising an error if the item does not exist?",
      "options": [
        "remove()",
        "discard()",
        "pop()",
        "del"
      ],
      "answer": "discard()"
    },
    {
      "question": "Which of the following operations can be performed on a frozenset?",
      "options": [
        "Adding elements",
        "Removing elements",
        "Set operations (union, intersection)",
        "Modifying elements"
      ],
      "answer": "Set operations (union, intersection)"
    },
    {
      "question": "What will be the output of {1, 2, 3} | {2, 3, 4}?",
      "options": [
        "{1, 2, 3}",
        "{1, 2, 3, 4}",
        "{2, 3}",
        "{4}"
      ],
      "answer": "{1, 2, 3, 4}"
    },
    {
      "question": "Which of the following operations removes an element from a set?",
      "options": [
        "remove()",
        "discard()",
        "pop()",
        "All of the above"
      ],
      "answer": "All of the above"
    },
    {
      "question": "What happens when you try to add a duplicate element to a set?",
      "options": [
        "It raises an error",
        "It adds the duplicate element",
        "The duplicate element is ignored",
        "It overwrites the existing value"
      ],
      "answer": "The duplicate element is ignored"
    },
    {
      "question": "Which of the following is not a valid set operation?",
      "options": [
        "Union",
        "Intersection",
        "Concatenation",
        "Difference"
      ],
      "answer": "Concatenation"
    },
    {
      "question": "What is rehashing in the context of sets?",
      "options": [
        "Changing the hash value of an existing element",
        "Recalculating the hash values of all elements when the set size exceeds a certain limit",
        "Removing elements from the set",
        "Adding new elements to the set"
      ],
      "answer": "Recalculating the hash values of all elements when the set size exceeds a certain limit"
    },
    {
      "question": "What is the result of trying to add an object with a custom __hash__ method that returns the same value for different objects to a set?",
      "options": [
        "All objects are added successfully",
        "Only one object is added, others are ignored",
        "It raises a TypeError",
        "It raises a ValueError"
      ],
      "answer": "Only one object is added, others are ignored"
    },
    {
      "question": "Which of the following data types can be used as elements in a set?",
      "options": [
        "Lists",
        "Dictionaries",
        "Tuples",
        "All of the above"
      ],
      "answer": "Tuples"
    },
    {
      "question": "What happens if you try to add a mutable object (like a list) to a set?",
      "options": [
        "It is added successfully",
        "It raises a TypeError",
        "It is converted to a tuple",
        "It is ignored"
      ],
      "answer": "It raises a TypeError"
    },
    {
      "question": "What is the primary purpose of hashing in sets?",
      "options": [
        "To store elements in a sorted order",
        "To allow for fast access and retrieval of elements",
        "To ensure elements are unique",
        "To allow for duplicate elements"
      ],
      "answer": "To allow for fast access and retrieval of elements"
    },
    {
      "question": "What does the garbage collector in Python do?",
      "options": [
        "Deletes all unused variables",
        "Frees up memory by removing unreferenced objects",
        "Clears the entire memory",
        "Manages all object references"
      ],
      "answer": "Frees up memory by removing unreferenced objects"
    },
    {
      "question": "Which module provides access to garbage collection functionality in Python?",
      "options": [
        "sys",
        "os",
        "gc",
        "mem"
      ],
      "answer": "gc"
    },
    {
      "question": "Which of the following is true about garbage collection in Python?",
      "options": [
        "It runs manually only",
        "It cannot be disabled",
        "It uses reference counting",
        "It does not manage circular references"
      ],
      "answer": "It uses reference counting"
    },
    {
      "question": "Which function is used to manually run garbage collection?",
      "options": [
        "gc.run()",
        "gc.collect()",
        "gc.cleanup()",
        "gc.execute()"
      ],
      "answer": "gc.collect()"
    },
    {
      "question": "What is the default behavior of Python’s garbage collector?",
      "options": [
        "Deletes all objects after execution",
        "Uses automatic memory management",
        "Does not manage memory at all",
        "Only runs when manually triggered"
      ],
      "answer": "Uses automatic memory management"
    }
  ],
  "lesson 8": [
    {
      "question": "What is a module in Python?",
      "options": [
         "A built-in function",
         "A file containing Python code",
         "A type of loop",
         "A variable storage"
      ],
      "answer": "A file containing Python code"
    },
    {
      "question": "Which keyword is used to import a module in Python?",
      "options": [
        "import",
        "include",
        "require",
        "module"
      ],
      "answer": "import"
    },
    {
      "question": "What is the purpose of the `dir()` function?",
      "options": [
        "Deletes a module",
        "Lists all attributes of a module",
        "Creates a new module",
        "Loads a module"
      ],
      "answer": "Lists all attributes of a module"
    },
    {
      "question": "How do you import only the `sqrt` function from the `math` module?",
      "options": [
        "import math.sqrt",
        "from math import sqrt",
        "import sqrt from math",
        "math.sqrt()"
      ],
      "answer": "from math import sqrt"
    },
    {
      "question": "What will `import random` do?",
      "options": [
        "Import the entire Python library",
        "Import the random module",
        "Import only specific functions",
        "Cause an error"
      ],
      "answer": "Import the random module"
    },
    {
      "question": "Which module provides functions for interacting with the operating system?",
      "options": [
        "sys",
        "os",
        "random",
        "math"
      ],
      "answer": "os"
    },
    {
      "question": "Which of the following is a built-in module in Python?",
      "options": [
        "numpy",
        "os",
        "pandas",
        "tensorflow"
      ],
      "answer": "os"
    },
    {
      "question": "How can you alias a module while importing?",
      "options": [
        "import module as alias",
        "module alias import",
        "alias module import",
        "import as module"
      ],
      "answer": "import module as alias"
    },
    {
      "question": "Which function returns the current working directory?",
      "options": [
        "os.getcwd()",
        "os.path()",
        "sys.path()",
        "os.cwd()"
      ],
      "answer": "os.getcwd()"
    },
    {
      "question": "Which method is used to remove a file in Python?",
      "options": [
        "os.delete()",
        "os.remove()",
        "os.rm()",
        "sys.remove()"
      ],
      "answer": "os.remove()"
    },
    {
      "question": "What is a function in Python?",
      "options": [
        "A loop structure",
        "A reusable block of code",
        "A built-in module",
        "An operator"
      ],
      "answer": "A reusable block of code"
    },
    {
      "question": "Which keyword is used to define a function in Python?",
      "options": [
        "function",
        "def",
        "define",
        "func"
      ],
      "answer": "def"
    },
    {
      "question": "What does a function return if no return statement is used?",
      "options": [
        "None",
        "0",
        "An empty string",
        "An error"
      ],
      "answer": "None"
    },
    {
      "question": "How do you call a function named `my_function`?",
      "options": [
        "call my_function()",
        "my_function()",
        "execute my_function",
        "def my_function"
      ],
      "answer": "my_function()"
    },
    {
      "question": "Which of the following is a correct function definition?",
      "options": [
        "def my_function:",
        "function my_function():",
        "def my_function():",
        "define my_function()"
      ],
      "answer": "def my_function():"
    },
    {
      "question": "What is the purpose of the `return` statement in a function?",
      "options": [
        "Stops the function execution",
        "Returns a value to the caller",
        "Prints output",
        "Defines a function"
      ],
      "answer": "Returns a value to the caller"
    },
    {
      "question": "Which function is used to get the number of arguments passed to a function?",
      "options": [
        "args.count()",
        "len(args)",
        "len()",
        "sys.argv"
      ],
      "answer": "len(args)"
    },
    {
      "question": "What is the correct syntax for a function with default arguments?",
      "options": [
        "def my_func(a, b=10):",
        "def my_func(a=10, b):",
        "my_func(a, b=10):",
        "func my_func(a, b=10)"
      ],
      "answer": "def my_func(a, b=10):"
    },
    {
      "question": "Which statement is true about functions in Python?",
      "options": [
        "A function can return multiple values",
        "Functions cannot be nested",
        "Functions cannot have default arguments",
        "Functions must return a value"
      ],
      "answer": "A function can return multiple values"
    },
    {
      "question": "What is a lambda function?",
      "options": [
        "A function defined using `lambda` keyword",
        "A recursive function",
        "A module",
        "A built-in function"
      ],
      "answer": "A function defined using `lambda` keyword"
    },
    {
      "question": "Which of the following is a correct lambda function?",
      "options": [
        "lambda x: x+2",
        "def lambda x: x+2",
        "lambda(x) { x+2 }",
        "function lambda(x): x+2"
      ],
      "answer": "lambda x: x+2"
    },
    {
      "question": "How do you define an anonymous function in Python?",
      "options": [
        "Using `def`",
        "Using `lambda`",
        "Using `func`",
        "Using `anonymous`"
      ],
      "answer": "Using `lambda`"
    },
    {
      "question": "Which function can execute another function passed as an argument?",
      "options": [
        "exec()",
        "eval()",
        "map()",
        "apply()"
      ],
      "answer": "apply()"
    },
    {
      "question": "Which built-in function applies a function to all elements in an iterable?",
      "options": [
        "apply()",
        "map()",
        "reduce()",
        "filter()"
      ],
      "answer": "map()"
    }
  ],
  "lesson 9": [
    {
      "question": "What is the purpose of exception handling in Python?",
      "options": [
        "To handle errors gracefully",
        "To speed up the program",
        "To avoid writing code",
        "To define functions"
      ],
      "answer": "To handle errors gracefully"
    },
    {
      "question": "Which keyword is used to handle exceptions in Python?",
      "options": [
        "catch",
        "handle",
        "except",
        "error"
      ],
      "answer": "except"
    },
    {
      "question": "Which block is always executed, whether an exception occurs or not?",
      "options": [
        "try",
        "except",
        "else",
        "finally"
      ],
      "answer": "finally"
    },
    {
      "question": "What happens if an exception occurs in the try block?",
      "options": [
        "The program stops immediately",
        "Python executes the except block",
        "The program ignores it",
        "The program restarts"
      ],
      "answer": "Python executes the except block"
    },
    {
      "question": "Which exception is raised when a number is divided by zero?",
      "options": [
        "ZeroDivisionError",
        "ValueError",
        "TypeError",
        "SyntaxError"
      ],
      "answer": "ZeroDivisionError"
    },
    {
      "question": "What is the output of `print(1/0)`?",
      "options": [
        "0",
        "Infinity",
        "ZeroDivisionError",
        "1"
      ],
      "answer": "ZeroDivisionError"
    },
    {
      "question": "Which statement is true about `try-except` blocks?",
      "options": [
        "They prevent all errors",
        "They handle exceptions and continue execution",
        "They stop execution immediately",
        "They ignore exceptions"
      ],
      "answer": "They handle exceptions and continue execution"
    },
    {
      "question": "Which block executes only when no exceptions are raised?",
      "options": [
        "try",
        "except",
        "else",
        "finally"
      ],
      "answer": "else"
    },
    {
      "question": "How can you raise an exception manually in Python?",
      "options": [
        "throw Exception()",
        "raise Exception()",
        "error Exception()",
        "trigger Exception()"
      ],
      "answer": "raise Exception()"
    },
    {
      "question": "Which of the following is a built-in exception in Python?",
      "options": [
        "FileNotFound",
        "OutOfMemory",
        "KeyboardInterrupt",
        "MemoryCrash"
      ],
      "answer": "KeyboardInterrupt"
    },
    {
      "question": "What does the `finally` block do?",
      "options": [
        "Executes only if there is an exception",
        "Executes only if there is no exception",
        "Executes always",
        "Executes when an error occurs"
      ],
      "answer": "Executes always"
    },
    {
      "question": "What is the correct syntax for handling multiple exceptions?",
      "options": [
        "except (TypeError, ValueError):",
        "except TypeError, ValueError:",
        "except: TypeError, ValueError",
        "try TypeError, ValueError"
      ],
      "answer": "except (TypeError, ValueError):"
    },
    {
      "question": "Which exception occurs when trying to access a non-existent list index?",
      "options": [
        "IndexError",
        "KeyError",
        "ValueError",
        "TypeError"
      ],
      "answer": "IndexError"
    },
    {
      "question": "What is the base class for all exceptions in Python?",
      "options": [
        "BaseException",
        "Exception",
        "Error",
        "Throwable"
      ],
      "answer": "BaseException"
    },
    {
      "question": "What does the `assert` statement do?",
      "options": [
        "Checks conditions and raises AssertionError if false",
        "Prints an error message",
        "Handles exceptions",
        "Terminates the program"
      ],
      "answer": "Checks conditions and raises AssertionError if false"
    },
    {
      "question": "Which function can provide details of an exception?",
      "options": [
        "sys.exception()",
        "sys.exc_info()",
        "traceback.details()",
        "exception.info()"
      ],
      "answer": "sys.exc_info()"
    },
    {
      "question": "Which of the following exceptions is raised when an invalid type is used?",
      "options": [
        "ValueError",
        "IndexError",
        "TypeError",
        "SyntaxError"
      ],
      "answer": "TypeError"
    },
    {
      "question": "How can you catch all exceptions?",
      "options": [
        "except Exception:",
        "except:",
        "except All:",
        "except Any:"
      ],
      "answer": "except:"
    },
    {
      "question": "Which exception is raised for invalid operations on a dictionary?",
      "options": [
        "KeyError",
        "TypeError",
        "NameError",
        "IndexError"
      ],
      "answer": "KeyError"
    }
  ],
  "lesson 10": [
    {
      "question": "Which function is used to open a file in Python?",
      "options": [
        "open()",
        "file()",
        "read()",
        "write()"
      ],
      "answer": "open()"
    },
    {
      "question": "What mode should be used to read a file in Python?",
      "options": [
        "'w'",
        "'r'",
        "'a'",
        "'x'"
      ],
      "answer": "'r'"
    },
    {
      "question": "Which method is used to read the entire contents of a file?",
      "options": [
        "read()",
        "readline()",
        "readlines()",
        "fetch()"
      ],
      "answer": "read()"
    },
    {
      "question": "Which mode is used to append data to an existing file?",
      "options": [
        "'r'",
        "'w'",
        "'a'",
        "'x'"
      ],
      "answer": "'a'"
    },
    {
      "question": "What does 'rb' mode do when opening a file?",
      "options": [
        "Reads the file as binary",
        "Reads the file as text",
        "Creates a new file",
        "Appends data"
      ],
      "answer": "Reads the file as binary"
    },
    {
      "question": "Which statement is true about 'with open()'?",
      "options": [
        "It automatically closes the file",
        "It keeps the file open indefinitely",
        "It prevents file access",
        "It locks the file"
      ],
      "answer": "It automatically closes the file"
    },
    {
      "question": "What happens if you open a non-existent file in read mode?",
      "options": [
        "A new file is created",
        "An error occurs",
        "The file opens normally",
        "Nothing happens"
      ],
      "answer": "An error occurs"
    },
    {
      "question": "Which function writes data to a file?",
      "options": [
        "write()",
        "read()",
        "append()",
        "store()"
      ],
      "answer": "write()"
    },
    {
      "question": "How can you read all lines from a file as a list?",
      "options": [
        "readlines()",
        "read()",
        "readline()",
        "fetchall()"
      ],
      "answer": "readlines()"
    },
    {
      "question": "What happens if a file is opened in 'w' mode and already exists?",
      "options": [
        "The file is overwritten",
        "An error occurs",
        "The file is locked",
        "The file is deleted"
      ],
      "answer": "The file is overwritten"
    },
    {
      "question": "Which method moves the file pointer to a specific position?",
      "options": [
       
        "tell()",
        "seek()",
        "move()",
        "jump()"
      ],
      "answer": "seek()"
    },
    {
      "question": "What does the 'tell()' function do?",
      "options": [
        "Returns the current position of the file pointer",
        "Moves the pointer",
        "Closes the file",
        "Reads the file"
      ],
      "answer": "Returns the current position of the file pointer"
    },
    {
      "question": "Which function closes an open file?",
      "options": [
       
        "end()",
        "stop()",
        "terminate()",
        "close()"
      ],
      "answer": "close()"
    },
    {
      "question": "How can you check if a file exists before opening it?",
      "options": [
        "Use os.path.exists()",
        "Try to open it",
        "Use file.exist()",
        "Check manually"
      ],
      "answer": "Use os.path.exists()"
    },
    {
      "question": "What will 'file.seek(0)' do?",
      "options": [
        "Move the pointer to the beginning",
        "Move to the end",
        "Move to the middle",
        "Move one step forward"
      ],
      "answer": "Move the pointer to the beginning"
    },
    {
      "question": "Which module is used for handling file paths?",
      "options": [
       
        "sys",
        "file",
        "os",
        "pathlib"
      ],
      "answer": "os"
    },
    {
      "question": "Which of the following is not a valid file mode?",
      "options": [
        
        "'r+'",
        "'rw'",
        "'a'",
        "'wb'"
      ],
      "answer": "'rw'"
    },
    {
      "question": "What does 'a+' mode do?",
      "options": [
        "Append and read",
        "Only read",
        "Only append",
        "Write and read"
      ],
      "answer": "Append and read"
    },
    {
      "question": "Which method reads a single line from a file?",
      "options": [
        
        "read()",
        "readlines()",
        "fetchline()",
        "readline()"
      ],
      "answer": "readline()"
    },
    {
      "question": "Which function removes a file?",
      "options": [
        
        "delete()",
        "file.remove()",
        "os.remove()",
        "unlink()"
      ],
      "answer": "os.remove()"
    }
  ],
  "Lesson 11": [
  {
    "question": "What is the purpose of the math module in Python?",
    "options": [
      "To perform string manipulations",
      "To work with mathematical functions",
      "To create graphical interfaces",
      "To access databases"
    ],
    "answer": "To work with mathematical functions"
  },
  {
    "question": "What is the output of math.sqrt(25)?",
    "options": [
      "5.0",
      "25",
      "2.5",
      "None of the above"
    ],
    "answer": "5.0"
  },
  {
    "question": "Which function returns the smallest integer greater than or equal to a number?",
    "options": [
      "math.floor()",
      "math.round()",
      "math.ceil()",
      "math.trunc()"
    ],
    "answer": "math.ceil()"
  },
  {
    "question": "What is the purpose of math.factorial(n)?",
    "options": [
      "Finds the square root of n",
      "Calculates the factorial of n",
      "Returns the log of n",
      "Generates random number up to n"
    ],
    "answer": "Calculates the factorial of n"
  },
  {
    "question": "What does math.pi represent?",
    "options": [
      "The value of 22/7",
      "The value of π (3.14159...)",
      "The square root of -1",
      "Infinity"
    ],
    "answer": "The value of π (3.14159...)"
  },
  {
    "question": "Which function is used to generate a random float between 0 and 1?",
    "options": [
      "random.randint()",
      "random.choice()",
      "random.random()",
      "random.uniform()"
    ],
    "answer": "random.random()"
  },
  {
    "question": "What does random.randint(1, 5) return?",
    "options": [
      "A random float between 1 and 5",
      "A random integer from 1 to 4",
      "A random integer from 1 to 5 inclusive",
      "An error"
    ],
    "answer": "A random integer from 1 to 5 inclusive"
  },
  {
    "question": "Which function randomly selects an element from a list?",
    "options": [
      "random.shuffle()",
      "random.choice()",
      "random.sample()",
      "random.pick()"
    ],
    "answer": "random.choice()"
  },
  {
    "question": "What does random.shuffle(my_list) do?",
    "options": [
      "Sorts the list",
      "Reverses the list",
      "Shuffles the list in place",
      "Returns the first element of the list"
    ],
    "answer": "Shuffles the list in place"
  },
  {
    "question": "Which module provides functions for working with dates and times?",
    "options": [
      "calendar",
      "datetime",
      "timeutils",
      "math"
    ],
    "answer": "datetime"
  },
  {
    "question": "What does datetime.datetime.now() return?",
    "options": [
      "The current date",
      "The current time",
      "The current date and time",
      "Nothing"
    ],
    "answer": "The current date and time"
  },
  {
    "question": "How can you get today’s date using the datetime module?",
    "options": [
      "datetime.now()",
      "datetime.date.today()",
      "datetime.time.today()",
      "today.now()"
    ],
    "answer": "datetime.date.today()"
  },
  {
    "question": "What is the use of timedelta in the datetime module?",
    "options": [
      "To measure CPU time",
      "To add or subtract dates",
      "To convert time zones",
      "To pause the program"
    ],
    "answer": "To add or subtract dates"
  },
  {
    "question": "What does datetime.strptime() do?",
    "options": [
      "Converts date to string",
      "Parses a string into datetime object",
      "Gets current timestamp",
      "Returns system time"
    ],
    "answer": "Parses a string into datetime object"
  },
  {
    "question": "What does calendar.month(2025, 5) return?",
    "options": [
      "Name of the month",
      "List of days in the month",
      "Formatted calendar for May 2025",
      "Number of holidays"
    ],
    "answer": "Formatted calendar for May 2025"
  },
  {
    "question": "How can you check if a year is a leap year?",
    "options": [
      "calendar.year(2024)",
      "calendar.leapyear(2024)",
      "calendar.isleap(2024)",
      "calendar.checkLeap(2024)"
    ],
    "answer": "calendar.isleap(2024)"
  },
  {
    "question": "Which function returns the weekday of the first day of a month and number of days in it?",
    "options": [
      "calendar.firstweekday()",
      "calendar.weekday()",
      "calendar.monthrange()",
      "calendar.getmonth()"
    ],
    "answer": "calendar.monthrange()"
  },
  {
    "question": "Which calendar function returns the full calendar of a year?",
    "options": [
      "calendar.year()",
      "calendar.display()",
      "calendar.show()",
      "calendar.calendar()"
    ],
    "answer": "calendar.calendar()"
  },
  {
    "question": "What is returned by random.sample([1, 2, 3, 4], 2)?",
    "options": [
      "Any two random elements from the list",
      "Only the first two elements",
      "A shuffled list",
      "An error"
    ],
    "answer": "Any two random elements from the list"
  },
  {
    "question": "What does math.pow(2, 3) return?",
    "options": [
      "8",
      "6",
      "9",
      "5"
    ],
    "answer": "8"
  },
  {
    "question": "What is the purpose of math.log10(1000)?",
    "options": [
      "Returns base-10 logarithm",
      "Returns square root",
      "Returns natural log",
      "Returns 1000"
    ],
    "answer": "Returns base-10 logarithm"
  },
  {
    "question": "What is the difference between math.floor() and math.trunc()?",
    "options": [
      "Both round up",
      "floor() rounds down, trunc() removes decimal",
      "trunc() rounds up",
      "They are the same"
    ],
    "answer": "floor() rounds down, trunc() removes decimal"
  },
  {
    "question": "Which function gets the name of the weekdays?",
    "options": [
      "calendar.day_names()",
      "calendar.weekdays()",
      "calendar.day_name",
      "calendar.names()"
    ],
    "answer": "calendar.day_name"
  },
  {
    "question": "How do you create a date object for Jan 1, 2025?",
    "options": [
      "date(2025, 1, 1)",
      "datetime.date(2025, 1, 1)",
      "datetime(2025, 1, 1)",
      "calendar.date(2025, 1, 1)"
    ],
    "answer": "datetime.date(2025, 1, 1)"
  },
  {
    "question": "What does random.uniform(1, 10) return?",
    "options": [
      "An integer between 1 and 10",
      "A random float between 1 and 10",
      "A list of numbers",
      "A string"
    ],
    "answer": "A random float between 1 and 10"
  }
],
"Lesson 12": [
  {
    "question": "What does OOP stand for in Python?",
    "options": [
      "Object Oriented Programming",
      "Operational Object Programming",
      "Only Oriented Programming",
      "Object Optimized Performance"
    ],
    "answer": "Object Oriented Programming"
  },
  {
    "question": "What is a class in Python?",
    "options": [
      "A template for creating objects",
      "An instance of an object",
      "A type of loop",
      "A data type"
    ],
    "answer": "A template for creating objects"
  },
  {
    "question": "What is an object in Python?",
    "options": [
      "A variable",
      "An instance of a class",
      "A function",
      "A conditional"
    ],
    "answer": "An instance of a class"
  },
  {
    "question": "Which keyword is used to define a class in Python?",
    "options": [
      "define",
      "function",
      "class",
      "object"
    ],
    "answer": "class"
  },
  {
    "question": "What is the purpose of the __init__ method?",
    "options": [
      "To define class attributes",
      "To call another class",
      "To initialize object properties",
      "To destroy the object"
    ],
    "answer": "To initialize object properties"
  },
  {
    "question": "How do you create an object from a class?",
    "options": [
      "object = ClassName",
      "object = ClassName()",
      "object.create(ClassName)",
      "new ClassName"
    ],
    "answer": "object = ClassName()"
  },
  {
    "question": "What is 'self' in a class method?",
    "options": [
      "A keyword to refer to the object itself",
      "A global variable",
      "An imported module",
      "A built-in function"
    ],
    "answer": "A keyword to refer to the object itself"
  },
  {
    "question": "Which method is automatically called when an object is created?",
    "options": [
      "__call__",
      "__init__",
      "__object__",
      "__new__"
    ],
    "answer": "__init__"
  },
  {
    "question": "Which of these is an example of encapsulation?",
    "options": [
      "Using a for loop inside a function",
      "Writing many classes in a single file",
      "Keeping data and methods in one class",
      "Calling global variables"
    ],
    "answer": "Keeping data and methods in one class"
  },
  {
    "question": "How do you define an attribute inside a class?",
    "options": [
      "self.attribute = value",
      "class.attribute = value",
      "set.attribute(value)",
      "attribute = value"
    ],
    "answer": "self.attribute = value"
  },
  {
    "question": "What is the output of this code?\n\nclass A:\n  def __init__(self):\n    self.name = 'AI'\n\na = A()\nprint(a.name)",
    "options": [
      "Error",
      "self",
      "AI",
      "None"
    ],
    "answer": "AI"
  },
  {
    "question": "Which of the following can be a method of a class?",
    "options": [
      "A variable",
      "A function inside a class",
      "A module",
      "An import statement"
    ],
    "answer": "A function inside a class"
  },
  {
    "question": "What happens if you forget to add 'self' in a method inside a class?",
    "options": [
      "The method works normally",
      "You get a TypeError",
      "It treats it as a static method",
      "It raises an AttributeError"
    ],
    "answer": "You get a TypeError"
  },
  {
    "question": "Which concept of OOP does '__init__' best represent?",
    "options": [
      "Encapsulation",
      "Polymorphism",
      "Constructor",
      "Destructor"
    ],
    "answer": "Constructor"
  },
  {
    "question": "Which of the following is NOT a principle of OOP?",
    "options": [
      "Encapsulation",
      "Polymorphism",
      "Compilation",
      "Inheritance"
    ],
    "answer": "Compilation"
  },
  {
    "question": "In OOP, what does the term 'class blueprint' mean?",
    "options": [
      "A function inside a class",
      "The main function",
      "The structure used to create objects",
      "A file name"
    ],
    "answer": "The structure used to create objects"
  },
  {
    "question": "What is the correct way to define a method in a class?",
    "options": [
      "def method[]:",
      "function method():",
      "def method(self):",
      "method(self):"
    ],
    "answer": "def method(self):"
  },
  {
    "question": "Which keyword is used to access properties within the class?",
    "options": [
      "this",
      "self",
      "my",
      "obj"
    ],
    "answer": "self"
  },
  {
    "question": "Can a class contain multiple methods?",
    "options": [
      "No",
      "Only two",
      "Yes",
      "Only one"
    ],
    "answer": "Yes"
  },
  {
    "question": "Which of these is a valid class name in Python?",
    "options": [
      "class1",
      "_myclass",
      "1class",
      "my class"
    ],
    "answer": "_myclass"
  },
  {
    "question": "What is the correct way to print an attribute of an object?",
    "options": [
      "print(object.attribute)",
      "print(attribute.object)",
      "object.attribute.print()",
      "attribute.print(object)"
    ],
    "answer": "print(object.attribute)"
  },
  {
    "question": "Where is 'self' passed automatically?",
    "options": [
      "To class attributes",
      "To the main function",
      "To every method in the class",
      "To print statements"
    ],
    "answer": "To every method in the class"
  },
  {
    "question": "What happens when you call a method on an object?",
    "options": [
      "Python executes the code inside the method",
      "Python creates a new class",
      "Python exits the program",
      "Python defines a new variable"
    ],
    "answer": "Python executes the code inside the method"
  },
  {
    "question": "Which method can be used to customize the string representation of an object?",
    "options": [
      "__print__",
      "__str__",
      "__repr__",
      "__display__"
    ],
    "answer": "__str__"
  },
  {
    "question": "Which function defines behavior of an object?",
    "options": [
      "Method",
      "Attribute",
      "Constructor",
      "Instance"
    ],
    "answer": "Method"
  },
  {
    "question": "What is true about class and object?",
    "options": [
      "A class is an instance of an object",
      "An object is a blueprint",
      "An object is an instance of a class",
      "Both are the same"
    ],
    "answer": "An object is an instance of a class"
  },
  {
    "question": "Which of the following best describes the 'init' method?",
    "options": [
      "It's the class destructor",
      "It's the initializer/constructor",
      "It's the final method",
      "It's used to call other classes"
    ],
    "answer": "It's the initializer/constructor"
  },
  {
    "question": "Which of these best demonstrates OOP's modularity?",
    "options": [
      "Having multiple functions in one file",
      "Separating logic into classes and methods",
      "Writing long if-else conditions",
      "Using only global variables"
    ],
    "answer": "Separating logic into classes and methods"
  },
  {
    "question": "What will the following code output?\n\nclass A:\n def __init__(self):\n  self.a = 10\n\nobj = A()\nprint(obj.a)",
    "options": [
      "10",
      "0",
      "None",
      "Error"
    ],
    "answer": "10"
  }
],
"Lesson 13": [
  {
    "question": "What are class variables in Python?",
    "options": [
      "Variables defined inside methods",
      "Variables shared among all instances of a class",
      "Variables defined outside the class",
      "Private variables"
    ],
    "answer": "Variables shared among all instances of a class"
  },
  {
    "question": "Where are class variables defined?",
    "options": [
      "Inside methods",
      "In the constructor",
      "Outside the class",
      "Within the class but outside methods"
    ],
    "answer": "Within the class but outside methods"
  },
  {
    "question": "What happens when you modify a class variable using an instance?",
    "options": [
      "The class variable is updated for all instances",
      "A new instance variable is created",
      "The original class variable is deleted",
      "The class variable is renamed"
    ],
    "answer": "A new instance variable is created"
  },
  {
    "question": "How should you modify a class variable for all instances?",
    "options": [
      "Using the instance name",
      "Using the method name",
      "Using the class name",
      "Using 'self'"
    ],
    "answer": "Using the class name"
  },
  {
    "question": "What is the correct way to access a class variable?",
    "options": [
      "object.variable_name",
      "self.variable_name",
      "ClassName.variable_name",
      "this.variable_name"
    ],
    "answer": "ClassName.variable_name"
  },
  {
    "question": "In the Bakery class, what kind of variable is 'type'?",
    "options": [
      "Instance variable",
      "Static variable",
      "Private variable",
      "Class variable"
    ],
    "answer": "Class variable"
  },
  {
    "question": "In the following code, what is 'flavor'?\n\nclass Bakery:\n  def __init__(self, flavor):\n    self.flavor = flavor",
    "options": [
      "A class method",
      "A class variable",
      "An instance variable",
      "A static variable"
    ],
    "answer": "An instance variable"
  },
  {
    "question": "What is the output of:\n\nclass Bakery:\n  type = \"cake\"\n\nprint(Bakery.type)",
    "options": [
      "cake",
      "type",
      "Bakery",
      "Error"
    ],
    "answer": "cake"
  },
  {
    "question": "If you change a class variable via an instance, does it affect other instances?",
    "options": [
      "Yes",
      "No",
      "Sometimes",
      "Only if using 'self'"
    ],
    "answer": "No"
  },
  {
    "question": "What keyword is typically used to reference a class inside a method?",
    "options": [
      "self",
      "class",
      "cls",
      "this"
    ],
    "answer": "cls"
  },
  {
    "question": "What is a static variable typically used for?",
    "options": [
      "Defining hidden properties",
      "Storing instance-level information",
      "Sharing data across all instances",
      "Only for internal debugging"
    ],
    "answer": "Sharing data across all instances"
  },
  {
    "question": "What does the following code output?\n\nclass Bakery:\n  type = \"cake\"\n\ncake1 = Bakery()\ncake1.type = \"cookie\"\nprint(Bakery.type)",
    "options": [
      "cookie",
      "cake",
      "None",
      "Error"
    ],
    "answer": "cake"
  },
  {
    "question": "How do you define a static/class variable inside a class?",
    "options": [
      "def var = value",
      "self.var = value",
      "var = value",
      "class var = value"
    ],
    "answer": "var = value"
  },
  {
    "question": "What does this code print?\n\nclass Bakery:\n  type = \"cake\"\ncake1 = Bakery()\ncake2 = Bakery()\nprint(cake2.type)",
    "options": [
      "cake",
      "type",
      "None",
      "Error"
    ],
    "answer": "cake"
  },
  {
    "question": "Which variable type allows each object to maintain its own value?",
    "options": [
      "Static variable",
      "Class variable",
      "Instance variable",
      "Shared variable"
    ],
    "answer": "Instance variable"
  },
  {
    "question": "What is the role of 'cls' in class methods?",
    "options": [
      "It refers to the object",
      "It is the module name",
      "It refers to the class itself",
      "It is the constructor"
    ],
    "answer": "It refers to the class itself"
  },
  {
    "question": "Which of the following best describes shadowing?",
    "options": [
      "Overwriting a method",
      "Hiding a class variable with an instance variable",
      "Using static variables",
      "Overloading a constructor"
    ],
    "answer": "Hiding a class variable with an instance variable"
  },
  {
    "question": "Which of these is NOT true about class variables?",
    "options": [
      "They are shared across all instances",
      "They can be accessed via the class name",
      "They are defined inside __init__",
      "They are defined at class level"
    ],
    "answer": "They are defined inside __init__"
  },
  {
    "question": "Which of the following is a class-level data member?",
    "options": [
      "Defined outside the class",
      "Defined in the constructor",
      "Defined using self",
      "Defined using the class name"
    ],
    "answer": "Defined using the class name"
  },
  {
    "question": "How can a class method be defined to access class variables?",
    "options": [
      "Using def method(self):",
      "Using def method(cls):",
      "Using staticmethod",
      "Using init"
    ],
    "answer": "Using def method(cls):"
  },
  {
    "question": "In Python, what is the main use of class and static variables?",
    "options": [
      "To initialize objects",
      "To define private attributes",
      "To share data across instances",
      "To define global constants"
    ],
    "answer": "To share data across instances"
  },
  {
    "question": "What will happen if you assign to a class variable using an instance?",
    "options": [
      "The class variable is updated",
      "A new class variable is created",
      "An instance variable is created, shadowing the class variable",
      "All instances are deleted"
    ],
    "answer": "An instance variable is created, shadowing the class variable"
  },
  {
    "question": "What will the following code print?\n\nclass A:\n  count = 0\n\na = A()\nb = A()\na.count = 1\nprint(b.count)",
    "options": [
      "1",
      "0",
      "None",
      "Error"
    ],
    "answer": "0"
  },
  {
    "question": "What is true about static methods?",
    "options": [
      "They can only access instance variables",
      "They do not take 'self' or 'cls' as a parameter",
      "They automatically take 'self' as parameter",
      "They can access instance and class variables"
    ],
    "answer": "They do not take 'self' or 'cls' as a parameter"
  },
  {
    "question": "Which decorator is used to define a static method?",
    "options": [
      "@staticmethod",
      "@class",
      "@self",
      "@static"
    ],
    "answer": "@staticmethod"
  }
]


}